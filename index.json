{"project": "openblas_wrap", "project_url": "https://github.com/ev-br/ob_bench", "show_commit_url": "#", "hash_length": 8, "revision_to_hash": {"20": "52614ae79eb4b883cf29343783ad116616211d2d", "23": "8ac2f0c2e5dbb4e2b0139c67fdffe94df0cc99dc", "25": "0ea2e47c3108e80deb349cd80cfb65a2cbde5c36", "26": "e007f88e496f4fd9c50f07b9373f2aa3524f2c52", "27": "7df2eda523968efce5d3384c75020961168db370", "28": "f214a8b203aa33cc3979ee7b73d70e658797e91b", "40": "5522c5d921bc122b3c36ec75edfa1e2875231e46", "42": "cdd722988ee144629f713813f4b398422bab6756", "43": "289c963959f2a2b6579cd5cc46914be6d59e687c", "45": "ccd3eaab18e4eeb09ff7cab0bcda003900eaa32c", "46": "4b05bd352ba6562034c2b3a53f34f7232f8b10cf"}, "revision_to_date": {"20": 1718115676000, "23": 1718117982000, "25": 1718118646000, "26": 1718120844000, "27": 1718121555000, "28": 1718167264000, "40": 1718299986000, "42": 1718300677000, "43": 1718352425000, "45": 1718354318000, "46": 1718354748000}, "params": {"machine": ["github-actions"], "python": ["3.11"], "branch": ["main"]}, "graph_param_list": [{"machine": "github-actions", "python": "3.11", "branch": "main"}], "benchmarks": {"benchmarks.DDot.time_ddot": {"code": "class DDot:\n    def time_ddot(self, n):\n        run_ddot(self.x, self.y)\n\n    def setup(self, n):\n        rndm = np.random.RandomState(1234)\n        self.x = np.array(rndm.uniform(size=(n,)), dtype=float)\n        self.y = np.array(rndm.uniform(size=(n,)), dtype=float)", "min_run_count": 2, "name": "benchmarks.DDot.time_ddot", "number": 0, "param_names": ["size"], "params": [["100", "1000"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "80bf1ad63415a6c7025642ca187eeaaa8591af1246bf3d3b968387d6a921c801", "warmup_time": -1}, "benchmarks.DSyrk.time_dsyrk": {"code": "class DSyrk:\n    def time_dsyrk(self, n):\n        run_dsyrk(self.a, self.c)\n\n    def setup(self, n):\n        rndm = np.random.RandomState(1234)\n        self.a = np.array(rndm.uniform(size=(n, n)), dtype=float, order='F')\n        self.c = np.empty((n, n), dtype=float, order='F')", "min_run_count": 2, "name": "benchmarks.DSyrk.time_dsyrk", "number": 0, "param_names": ["size"], "params": [["100", "1000"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "575b5769306b065cbbb7d3e1506711cc2a92a61bc43aaa7c262521688e1756e1", "warmup_time": -1}, "benchmarks.Daxpy.time_daxpy": {"code": "class Daxpy:\n    def time_daxpy(self, n):\n        run_daxpy(self.x, self.y)\n\n    def setup(self, n):\n        rndm = np.random.RandomState(1234)\n        self.x = np.array(rndm.uniform(size=(n,)), dtype=float)\n        self.y = np.array(rndm.uniform(size=(n,)), dtype=float)", "min_run_count": 2, "name": "benchmarks.Daxpy.time_daxpy", "number": 0, "param_names": ["size"], "params": [["100", "1000"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "3fea5e566c44b650ea6f9c63ccb3a01039e495f2491e9b4a9ada53796578f772", "warmup_time": -1}, "benchmarks.Dgemm.time_dgemm": {"code": "class Dgemm:\n    def time_dgemm(self, n):\n        run_dgemm(self.a, self.b, self.c)\n\n    def setup(self, n):\n        rndm = np.random.RandomState(1234)\n        self.a = np.array(rndm.uniform(size=(n, n)), dtype=float, order='F')\n        self.b = np.array(rndm.uniform(size=(n, n)), dtype=float, order='F')\n        self.c = np.empty((n, n), dtype=float, order='F')", "min_run_count": 2, "name": "benchmarks.Dgemm.time_dgemm", "number": 0, "param_names": ["size"], "params": [["100", "1000"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "15a0c8e093f6c9f05187ac49c93d40c5b28fce2ff629234ec355838e555a5f55", "warmup_time": -1}, "benchmarks.Dgesdd.time_dgesdd": {"code": "class Dgesdd:\n    def time_dgesdd(self, mn):\n        run_dgesdd(self.a, self.lwork)\n\n    def setup(self, mn):\n        m, n = (int(x) for x in mn.split(\",\"))\n    \n        rndm = np.random.RandomState(1234)\n        a = np.array(rndm.uniform(size=(m, n)), dtype=float, order='F')\n    \n        lwork, info = dgesdd_lwork(m, n)\n        lwork = int(lwork)\n        assert info == 0\n    \n        self.a, self.lwork = a, lwork", "min_run_count": 2, "name": "benchmarks.Dgesdd.time_dgesdd", "number": 0, "param_names": ["(m, n)"], "params": [["'100, 5'", "'1000, 222'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "3e9351b98d1a9550ca5b1810938e5b8ee80b76d05eb155749890912d50f7ba86", "warmup_time": -1}, "benchmarks.Dgesv.time_dgesv": {"code": "class Dgesv:\n    def time_dgesv(self, n):\n        run_dgesv(self.a, self.b)\n\n    def setup(self, n):\n        rndm = np.random.RandomState(1234)\n        self.a = (np.array(rndm.uniform(size=(n, n)), dtype=float, order='F') +\n                  np.eye(n, order='F'))\n        self.b = np.array(rndm.uniform(size=(n, 1)), order='F')", "min_run_count": 2, "name": "benchmarks.Dgesv.time_dgesv", "number": 0, "param_names": ["size"], "params": [["100", "1000"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "c27f73708b335ef2698733f2fd15f8b44ba99a3e6f488b2db3781893ffb72213", "warmup_time": -1}, "benchmarks.Dsyev.time_dsyev": {"code": "class Dsyev:\n    def time_dsyev(self, n):\n        run_dsyev(self.a, self.lwork)\n\n    def setup(self, n):\n        rndm = np.random.RandomState(1234)\n        a = rndm.uniform(size=(n, n))\n        a = np.asarray(a + a.T, dtype=float, order='F')\n        a_ = a.copy()\n    \n        lwork, info = dsyev_lwork(n)\n        lwork = int(lwork)\n        assert info == 0\n    \n        self.a = a_\n        self.lwork = lwork", "min_run_count": 2, "name": "benchmarks.Dsyev.time_dsyev", "number": 0, "param_names": ["size"], "params": [["50", "200"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "ab487ffb9a781050bd30f7e44ff22824fdd2f38151139dc5bd233603bf7ddacc", "warmup_time": -1}, "benchmarks.Nrm2.time_dnrm2": {"code": "class Nrm2:\n    def time_dnrm2(self, n):\n        run_dnrm2(n, self.x, 1)\n\n    def setup(self, n):\n        rndm = np.random.RandomState(1234)\n        self.x = rndm.uniform(size=(n,)).astype(float)", "min_run_count": 2, "name": "benchmarks.Nrm2.time_dnrm2", "number": 0, "param_names": ["size"], "params": [["100", "1000"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "abbd8dffa55067de64ae489c77f1e73ca9c0c0364a9a7c62fa9d0a9a9e9a08e3", "warmup_time": -1}}, "machines": {"github-actions": {"machine": "github-actions", "version": 1}}, "tags": {}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}